#+TITLE: Correction

* Q1
** Statement
Print the lookup table of the S-box of the =PRESENT= block cipher. Print the length (in the Python sense) of this object. Anything strange?
** Answer
#+BEGIN_SRC python :tangle scripts/Q1.py
from sage.crypto.sboxes import sboxes

s = sboxes["PRESENT"]
print(len(s))
print(len(list(s)))
      
#+END_SRC

Be careful, the SAGE =SBox= implements the =__len__= method in a counter-intuitive way: it returns the bit-length of the input, not the number of elements in the LUT!

* Q2
** Statement
Print the lookup tables of all the S-boxes of the =SERPENT= block cipher.
** Answer
#+BEGIN_SRC python :tangle scripts/Q2.py
from sage.crypto.sboxes import sboxes

for k in sorted(sboxes.keys()):
    if "SERPENT" in k:
        print(k, list(sboxes[k]))      
#+END_SRC

This is straight-forward using Python string testing: we just test if ="SERPENT"= is in the name of the S-box, and print it if it's the case.

* Q3
** Statement
Compute the differential spectrum of the S-box of the =AES=. Any pattern? Count how many times each coefficient appears in each row/column. Any pattern? Any idea why?
** Answer
#+BEGIN_SRC python :tangle scripts/Q3.py
from sage.crypto.sboxes import sboxes
from sboxU import *

from collections import defaultdict

s = list(sboxes["AES"])
diff_spec = differential_spectrum(s)

# All coefficients occur a number of times that is a multiple of 255
for k in diff_spec.keys():
    print(k, diff_spec[k] % 255)

d = ddt(s)
for delta_in in range(1, 256):
    row_count = defaultdict(int)
    for delta_out in range(0, 256):
        row_count[d[delta_in][delta_out]] += 1
    print("{:02x} : {}".format(
        delta_in,
        pretty_spectrum(row_count)
    ))
    
#+END_SRC

All the coefficients (0, 2 and 4) appear a number of times that is a multiple of 255 in the DDT of the AES. This can be seen by printing the differential spectrum using the =differential_spectrum= function, and then reducing the number of occurrences modulo 255.

The explanation is straightforward: for a monomial x^d, all rows of the DDT contain the same distribution of coefficients. Indeed, the number of solutions x of

(x+a)^d + x^d = b

for a!=0 is the same as the number of solutions of

a^d(y + 1)^d + a^d y^d = b

where y = (x / a). Dividing both sides by a^d, we get

(y+1)^d + y^d = b/a^d

meaning that the distribution of the number of solutions when the output difference takes all possible values does not depend on the input difference. In short, this pattern comes from the fact that the AES is essentially a monomial, as can be seen in  [[https://en.wikipedia.org/wiki/Rijndael_S-box][wikipedia]].

* Q 4
** Statement
Write a function computing the differential spectrum of an S-box without having to store the full DDT in memory.
** Answer
#+BEGIN_SRC python :tangle scripts/Q4.py
from sage.crypto.sboxes import sboxes
from sboxU import *

def ddt_by_hand(s):
    # we already know the first row since it corresponds to a zero
    # input diffrerence
    size = len(s)
    result = [[size] + [0 for delta_in in range(1, size)]]
    for delta_in in range(1, size):
        row = [0 for x in range(0, size)] # yes, [0]*size would work,
                                         # but multiplying lists can
                                         # have fun/disastrous side
                                         # effects
        for x in range(0, size):
            delta_out = oplus(s[oplus(x, delta_in)], s[x])
            row[delta_out] += 1
        result.append(row)
    return result

if __name__ == "__main__":
    s = list(sboxes["PRINCE"])
    for row in ddt_by_hand(s):
        print(row)
#+END_SRC


* Q ?
** Statement

** Answer
#+BEGIN_SRC python :tangle scripts/Q2.py

#+END_SRC

