#+TITLE: Correction

* Q1
** Statement
Print the lookup table of the S-box of the =PRESENT= block cipher. Print the length (in the Python sense) of this object. Anything strange?
** Answer
#+BEGIN_SRC python :tangle scripts/Q1.py
from sage.crypto.sboxes import sboxes

s = sboxes["PRESENT"]
print(len(s))
print(len(list(s)))
      
#+END_SRC

Be careful, the SAGE =SBox= implements the =__len__= method in a counter-intuitive way: it returns the bit-length of the input, not the number of elements in the LUT!

* Q2
** Statement
Print the lookup tables of all the S-boxes of the =SERPENT= block cipher.
** Answer
#+BEGIN_SRC python :tangle scripts/Q2.py
from sage.crypto.sboxes import sboxes

for k in sorted(sboxes.keys()):
    if "SERPENT" in k:
        print(k, list(sboxes[k]))      
#+END_SRC

This is straight-forward using Python string testing: we just test if ="SERPENT"= is in the name of the S-box, and print it if it's the case.

* Q3
** Statement
Compute the differential spectrum of the S-box of the =AES=. Any pattern? Count how many times each coefficient appears in each row/column. Any pattern? Any idea why?
** Answer
#+BEGIN_SRC python :tangle scripts/Q3.py
from sage.crypto.sboxes import sboxes
from sboxU import *

from collections import defaultdict

s = list(sboxes["AES"])
diff_spec = differential_spectrum(s)

# All coefficients occur a number of times that is a multiple of 255
for k in diff_spec.keys():
    print(k, diff_spec[k] % 255)

d = ddt(s)
for delta_in in range(1, 256):
    row_count = defaultdict(int)
    for delta_out in range(0, 256):
        row_count[d[delta_in][delta_out]] += 1
    print("{:02x} : {}".format(
        delta_in,
        pretty_spectrum(row_count)
    ))
    
#+END_SRC


* Q ?
** Statement

** Answer
#+BEGIN_SRC python :tangle scripts/Q2.py

#+END_SRC

