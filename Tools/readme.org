#+TITLE: The Tools of the Trade: Things a Symmetric Cryptographer Should Know How To Do

* 1) Choose and Know your tools
** 1.1) Text Editor
Pick one text editor (/maybe/ two), and learn how to use it *well*:
- find, test, and then use the plugins that can be relevant to how you work,
- figure out how to quickly navigate a file (jump to next section/jump to function),
- learn the keyboard shortcuts,
- setup a spell checker.

Well known/popular general purpose text editors include:
1. EMACS (GNU license, i.e., free)
2. Vi/Vim/neoVim (Apache, i.e., free)
3. Sublime Text (Proprietary, but can be used for free to some extent)
4. Visual Code  (Proprietary, but can be used for free to some extent)

I personally prefer to stay away from web-based tools like =overleaf=: the internet can go down, and the editor itself cannot be customized.

- Q? (1) :: Which text editor do you use? Why did you choose it?
** 1.2) Storing and Retrieving Information
Throughout your PhD and beyond, you will accumulate a lot of information: notes on papers you read, experimental data you generated, libraries you've written, lemmas you derived (but maybe haven't published yet)... Are they stored somewhere? And are they stored in a way that allows you to easily find them when you need them?

*** 1.2.a) To keep notes
For your notes, you could do something as simple as storing them as text files in a specific folder, and then use =grep= to retrieve the relevant ones. To go refine this method, some software tools exist that are intended to help you store your information, and index them using for example tags. To find such tools, ask your favourite search engine for "Knowledge Management System (KMS)" or "personal wiki".

For this purpose, I use [[https://orgmode.org/][orgmode]], a functionality of my text editor (EMACS). In fact, the very file you are reading is a basic orgmode file! Orgmode is mostly tied to EMACS, but there are alternatives. I have also started using into another EAMCS package based on orgmode called [[https://www.orgroam.com/][orgroam]] to handle the storage and the linking of my notes.

An advantage of relying on plaintext files (even if they use some more advanced syntax like markdown or orgmode) is that they are easy to store in a git repository, meaning that you can easily share them across multiples machines (say, the desktop computer in your office and your laptop).
*** 1.2.b) A general approach: accumulation
To me, something a general "rule" to keep in mind when investigating something, or debugging, or anything else really, is the following:

#+BEGIN_QUOTE
If you do something properly and in a reproducible way, you only need to do it once.
#+END_QUOTE

As a consequence, whenever I run into a specific problem (say, display a table in a specific way in LaTeX), I put the necessary package and a comment explaining how it works (ideally with a link to where I found it) in a =tex= file that I use every time I am writing a LaTeX document. It takes a bit more time to solve a problem this way, but then I can effectively forget about it.

I also have "templates" of beamer presentations, and of C++/Python interface: files that I can just copy/paste when starting on such project to have a basic starting point every time.
*** 1.2.c) cryptobib
To simplify the storage of bibtex entry (and the collaboration with other people), I recommend you use [[https://cryptobib.di.ens.fr/][cryptobib]], a huge bibtex file maintained by a French university, that contains all the papers on =ePrint=, as well as all those published at IACR conferences. For the papers not in this file, you can keep an additional file, say =mybiblio.bib=, that contains all the bibtex entries you have used. That way, you don't need to look up the corresponding entries each time.

* 2) Basic Command Line Tools
The command line allows you to operate on files and text in a repeatable way---in fact, you can write small programs that perform such manipulations for you. Instead of dealing with the information stored on your computer using a graphical interface (meaning, clicking on stuff), you instead do it by writing instructions in a specific language.

Just start a terminal, and then write =ls= in the prompt: it will display all the files and folders in your home directory. From there, you can look at the following tutorial to learn more.

Redhat has some good tutorials on:
- File manipulation: [[https://www.redhat.com/en/blog/10-more-commands-terminal][link]]
- Text manipulation: [[https://www.redhat.com/en/blog/linux-text-manipulation-tools][link]]

Then, you can start learning about scripting for example here: [[https://computing.stat.berkeley.edu/tutorial-using-bash/shell-programming.html][link]].

- Q? (2) :: Generate a directory called =useless-directory= that contains 20 files with name =file-<number>.txt=, where =<number>= is replaced by an increasing index, and where each file simply contains a single line, each with content ="this file has <number> line(s)"=.

  Hint: start by creating a "master file" with content ="this file has REPLACE line(s)"= , and then use shell scripting and the =sed= command to generate 20 files. Alternatively, use the =echo= command and redirect its output.

- Q? (3) :: What is the cryptobib bibtex key for the paper introducing the =Griffin= hash function?
  
- Q? (4) :: Write a short shell script taking as input part of the title of a paper and which returns its bibtex key. Hint: =grep <something> <some_file> -B10= will return the lines some file containing something /along with the 10 previous lines/.
* 3) Basic Python Programming for Research
** 3.1) The way I see it: Everything is a Tree
The tree structure is a very convenient tool to organize data. It is what we use in papers (sections/subsections correspond to layers of nodes), and it is what computers use (tree of folders). They do make it easier to find what we look for.

For example, I always use the same structure for all my projects, where a "project" is basically (intended to become) a paper, or a standalone software library (in my case, =sboxU=). Each has its own folder in a specific directory, and then each folder has the same structure:
- an orgmode file for my notes (*not* intended to be shared)
- my latex drafts and basic scripts (hopefully intended to be shared at some point)
- a folder called =shared= corresponding to a git repository that I use to share data with my co-author (if relevant, but usually is).

I always separate in different folders the clean looking LaTeX, the not so-clean looking personal notes in org, and the scripts and programs I write.

I also try to keep a clean distinction between what is still in draft form (LaTeX proof of a small lemma, messy SAGE script trying to generate some equations), and what is in a shareable form (clean write up of a full proof of a theorem, proper implementation of a primitive I am investigating). The aim then is to move the interesting draft stuff to a clean, shareable form at some point.
  
The tree structure can also be used within a non-LaTeX file: nothing prevents you from divided your SAGE scripts into section, subsections, etc., each with its own title. Doing this both forces you to keep some order in your script, and will help you (or you co-authors) in the future when looking back at your code.

** 2.2) Not so Basic Python Features
*** Object Oriented Programming
When some functionalities are dependent on data that remain constant across multiple calls to a  function (say, the block size of a block cipher, or the key of an instance), it can make sense to implement objects, as "object oriented programming" objects.

It is very easy to do so in Python since it is much more permissive than, say, C++. It is also much easier to shoot yourself in the foot, so be careful.

A detailed tutorial is provided in the [[https://docs.python.org/3/tutorial/classes.html][python official documentation]].

*** Detecting Problems Early
You can verify that the inputs of a function have the correct shape (i.e. that the integers are within the appropriate bounds) using =assert=, e.g.

#+BEGIN_SRC python
def some_function(x):
    assert x > 10
    return x - 10
#+END_SRC

will fail if =x= is not greater than 10, and will do so in a *clear* way: it will specifically complain that =x= is not greater than 10.

Putting such verification is a very good habit to take: they make the difference between immediately finding a bug, and spending 10min investigating what is happening.


You can also interrupt the running of your program with a specific error message by "raising an exception" as follows:

#+BEGIN_SRC python
def some_function(x):
    if x <= 10:
        raise Exception("input x of some_function should be <=10, but is in fact equal to " + str(x))
    return x - 10
#+END_SRC

Again, a wrong query will trigger a useful error message, thus cutting on debugging time.

*** Creating a module
You should strive for re-usability of your code. In order for it to be easy to reuse, the best way is to turn it into a module that you will simply load in your subsequent work. If your library is small, you can keep it to a single file. However, having a multi-file module is not that hard. Both are explained below.
**** Single file
If your code is in a single file, then reusing it elsewhere is straightforward: simply use the =import= mecanism. For example, supposed you have the following file (=yourLib.py=) in a directory.
#+BEGIN_SRC python :tangle py/yourLib.py
def basic_function():
    print("something")

constant = 3
#+END_SRC

Then you can reuse it by loading it from another file, say =mainFile.py=, as long as it is in the same directory. You can do it in two different ways.

First way, where you need to explicitely mention =yourLib= when you use its content.
#+BEGIN_SRC python :tangle py/mainFile-single.py
import yourLib # <- note the absence of ".py"

yourLib.basic_function()
print("constant from yourLib = ", yourLib.constant)
#+END_SRC

Second way, where you don't need to (which is nice), but which could lead to conflicts in names if you are not careful (which is less nice).

#+BEGIN_SRC python :tangle py/mainFile-single-bis.py
from yourLib import basic_function, constant

basic_function()
print("constant from yourLib = ", constant)
#+END_SRC

In the second case, in order to mention one by one all the functions you want to import, just use =from yourLib import *= instead.

**** Multiple files
Suppose your library is big enough that you can't get away with just one file. The idea in this case is that you will put all of these in a folder, and then import this folder. For example, you can create the folder =yourModule=, and put two files in it that are as follows:

=yourModule/first.py= contains the same as before...

#+BEGIN_SRC python :tangle py/yourModule/first.py
def basic_function():
    print("something")

constant = 3
#+END_SRC

... and =yourModule/second.py= contains another piece of impressive software engineering.

#+BEGIN_SRC python :tangle py/yourModule/second.py
def sophisticated_function():
    result = "something"
    result += " sophisticated"
    print(result)

other_constant = 4
#+END_SRC

You then simply need to add the following file called =__init__.py= to this folder...

#+BEGIN_SRC python :tangle py/yourModule/__init__.py
from .first import *
from .second import *
#+END_SRC

... so that the directory tree is:
- =theProjectYouWorkOn/=
  - =mainFile.py=
  - =yourModule/=
    - =first.py= 
    - =second.py= 
    - =__init__.py= 

The following =mainFile.py= will then work as expected: importing =yourModule= will run the =__init__.py= script, and provide you with the functions contained in the =first.py= and =second.py= files. 
      
#+BEGIN_SRC python :tangle py/mainFile-module.py
from yourModule import *

basic_function()
sophisticated_function()
print("other constant = ", other_constant)
#+END_SRC

You can add some logic in the =__init__.py= script to provide additional functions, or to decide which of the files you want to import, for instance by testing which OS your user is using and/or which python/SAGE version.

*** Question
- Q? (5) :: Setup a python project where:
  + a folder called =caesarEncryption= contains:
    + a file =caesar.py= contains a class =Caesar= implementing the CAESAR cipher: it must take as input the shift amount (the "key") during construction, and must provide =encrypt(plaintext)= and =decrypt(ciphertext)= methods. The functions should raise an exception if the input is not a string containing letters only.
    + a =__init__.py= file to turn the folder into a module, and which provides an additional function =get_encryption_oracle= that picks a shift amount at random and returns the corresponding =Caesar= instance.
  + a script called =attack.py= which imports your =caesarEncryption= module, uses =get_encryption_oracle= to obtain a =Caesar= instance, and recovers the key.

     (don't spend a ton of time figuring out digrams and stuff like that, the aim here is to play with python, not the subtleties of the cryptanalysis of the Caesar cipher)
  
** C++ Functions Within a SAGE Script
Basic case of functions.

** 2.3) Some helpful links
- =Rich= is a python module that can easily make your terminal output much prettier---and thus much easier to parse. [[https://rich.readthedocs.io/en/stable/introduction.html][Link]].

* 2) LaTeX
** 2.2) Beamer Hacks
Along with the slides themselves, I have put their source code in the corresponding folder of this repository: feel free to "borrow" any macro you see there!

To compile it, you will need the "INRIA" font (see for example [[https://fonts.google.com/specimen/Inria+Serif][here]]) and =xelatex= rather than =pdflatex=. Simply remove the lines about setting the font in =style.tex= to get rid of this setting.
*** 1.2.a) Beamer theme
A gallery of all default beamer themes is available [[https://deic.uab.cat/~iblanes/beamer_gallery/][here]].

*** 1.2.b) Beamer Automated ToC Display
Add the following code snippet before your beamer presentation to be able to display the outline of the talk, and then the outline of the relevant section in the beginning of each section. This display starts at the point at which you write =\tocStartsAppearingHere{}=.

#+BEGIN_SRC latex
\newcommand\tocStartsAppearingHere{ %
  \begin{frame}[noframenumbering]
    \frametitle{Outline}
    \tableofcontents[
    sectionstyle=show,
    subsectionstyle=hide,
    subsubsectionstyle=hide] 
  \end{frame}

  \AtBeginSection[] { %
    \begin{frame}[noframenumbering]
      \frametitle{Plan of this Section}
      \tableofcontents[
      currentsection,
      currentsubsection,
      sectionstyle=show/shaded,
      subsectionstyle=show/hide/hide,
      subsubsectionstyle=hide]
    \end{frame}
  }

  \AtBeginSubsection[] { %
    \begin{frame}[noframenumbering]
      \frametitle{Plan of this Section}
      \tableofcontents[
      currentsection,
      currentsubsection,
      sectionstyle=show/shaded,
      subsectionstyle=show/shaded/hide,
      subsubsectionstyle=hide]
    \end{frame}
  }
}

#+END_SRC

*** 1.2.c) Use Some Color
Syntax highlighting greatly helps with reading a program. Mathematics are not that different, and a well chosen color scheme can greatly help convey information. For example, if all the functions are blue, or if all the linear functions are in a different color from the non-linear ones, then your talk might be even clearer. The following macro helps with that:

#+BEGIN_SRC latex
\newcommand{\defcolvar}[3]{%
  \expandafter\newcommand\csname my#1\endcsname{{\color{#3} #2 }} %
}
#+END_SRC

To use it, add for example =\defcolvar{alpha}{\alpha}{red}= at any point of your code. From that point onwards, the macro =\myalpha= (note the =my=) will correspond to a red $\alpha$. Similarly, =\defcolvar{n}{n}{blue}= will allow you to use =\myn= to display a blue n. It simplifies the use of colors, and encourages the usage of consistent colorization throughout the code: both are good!
*** 1.2.d) Dynamic Slides
In beamer, each =frame= can be divided into multiplies =slides=. The slides are generated automatically using some macros inside the frame, and can for instance correspond to subsets of the content of the frame. A typical example is an =itemize= list where the items appear one after another: the frame is divided into slides, where each slide contains one more item than the previous one. To use this concept, you can use the following commands. Some of them take an index as an argument: it is the index of the slide in which you want things to happen. It can also be a range: =<2-4>= will have something happen on slides 2, 3 and 4 only; while =<2->= will have something from slide 2 and onwards.

- =\pause= :: Creates a copy of the current slide, one with the content generated by parsing what is before the =\pause=, and one with the same content *and* the one that is after the =\pause=. The rendering is "aware" of what will be displayed next: the slides before and after the pause have an identical beginning.

- =\onslide<index>{ ... }= :: The content of the macro will be displayed only on the given slide(s), but space will be reserved for it. For instance, the behaviour of =\pause= can be seen as wrapping what is after it in =\onslide<(i+1)->=, where =(i+1)= is replaced by the relevant index.

- =\only<index>{ ... }= :: Same as =\onslide=, except nothing clever is done about space: the LaTeX code is contained is included in the given slides, and is completely ignored in the other ones.
  
- Q? :: make a presentation with a slide containing a table where some numbers change weight (bold or not bold) as you hit "next".

** 2.3) Other LaTeX Tricks
*** 1.3.a) Setting some lengths
In the following macros, =0.3cm= and =1.1= can be changed to whatever you like.
- =\setlength\itemsep{0.3cm}= :: Sets the space between the different items. A high value means a high space, while a negative value brings the lines even closer together. Putting this after =\begin{itemize}=, =\begin{enumerate}= or =\begin{description}= (and before the =\item=) is a convenient way to set it for a single environment.
- =\setlength\tabcolsep{0.3cm}= :: Sets the horizontal space between columns. A high value means they will be far apart. Put it inside the =table= environment (but outside the =tabular= one) to limit its scope.
- ={\renewcommand\arraystretch{1.1} <your table>}= :: This multiplies the vertical size of a table by the given amount; very useful to increase the height of its rows. 
* Working Together
** =git= (basics)
** Overleaf
Exists and is used, so you should know how to use it. In particular, learn how to download a complete project, and do it on a regular basis if you use it (as a security measure).

Also, I would not recommend relying on it too much: it can crash (and then you are stuck), and it can force your co-authors to use its text editor rather than their customized and optimized personal one.

* Additional Resources
- MIT "missing semester :: Students from MIT have put online resources about the tools they need to master for the CS education, which are of course very similar to those needed for cryptography research. It has its own [[https://missing.csail.mit.edu/][website]].
- MPRI classes :: MPRI is a master's degree in Paris focused on theoretical computer science. The content of its courses is online, in particular, the following link will take you to a class on "Efficient Algorithms in Computer Algebra": [[https://wikimpri.dptinfo.ens-cachan.fr/doku.php?id=cours:c-2-22][link]].

